<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2019 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 * @author        Tiago Tescaro <tiago.tescaro@b2wdigital.com>
 */

namespace B2W\SkyHub\Model\Repository;

use B2W\SkyHub\Contract\Repository\QueueDbRepositoryInterface;
use B2W\SkyHub\Exception\Queue\EmptyQueueException;
use B2W\SkyHub\Model\Queue\MessageAbstract;
use B2W\SkyHub\Model\Resource\Select;
use B2W\SkyHub\Model\Setup\Queue;
use B2W\SkyHub\Model\Entity\QueueEntity;

/**
 * Class QueueDbRepository
 * @package B2W\SkyHub\Model\Repository
 */
class QueueDbRepository implements QueueDbRepositoryInterface
{
    /**
     * @param MessageAbstract $message
     * @return $this|mixed
     */
    public function add(MessageAbstract $message)
    {
        global $wpdb;

        if ($this->exists($message)) {
            return $this;
        }

        if (!$this->verifyIntegrationStatusOrder($message)) {
            return $this;
        }

        $wpdb->insert(
            $wpdb->prefix . Queue::TABLE,
            array(
                'status'       => $message->getStatus(),
                'message_type' => get_class($message),
                'type'         => $message->getType(),
                'params'       => serialize($message->getParams())
            )
        );

        return $this;
    }

    /**
     * Verify if order integrated
     * 
     * @param MessageAbstract $message
     * @return Bollean
     */
    protected function verifyIntegrationStatusOrder($message)
    {
        $statusOrder = $message->getStatusOrder();
        if (!$statusOrder || $statusOrder == 'invoice') {
            return true;
        }

        $orderId = $message->getParams()[0];
        $code = '_skyhub_order_integrated_'.$statusOrder;
        $skyhub_integrated = get_metadata('post', $orderId, $code);

        if (!$skyhub_integrated) {
            add_metadata('post', $orderId, $code, 'true');
            return true;
        }
        return false;
    }

    /**
     * @param MessageAbstract $message
     * @return Boolean
     */
    public function exists(MessageAbstract $message)
    {
        global $wpdb;

        $select = new Select();

        $select->from(Queue::TABLE);
        $select->where("status = '{$message->getStatus()}'");
        $select->where("message_type LIKE '".str_replace('\\', '%', get_class($message))."'");
        $select->where("type = '".sanitize_text_field($message->getType())."'");
        $select->where("params = '".serialize($message->getParams())."'");

        if ($wpdb->get_results($select->prepare())) {
            return true;
        }

        return false;
    }

    public function getDataQueue()
    {
        global $wpdb;

        $select = new Select();
        $select->from(Queue::TABLE);

        $return = [];
        foreach ($wpdb->get_results($select) as $result) {
            $queue = new QueueEntity();
            $queue->setId($result->id);
            $queue->setCreatedAt($result->created_at);
            $queue->setType($result->type);
            $queue->setStatus($result->status);
            $queue->setParam(implode(',', unserialize($result->params)));
            $return[] = $queue;
        }
        return $return;
    }

    /**
     * @param null $type
     * @return MessageAbstract|mixed
     * @throws EmptyQueueException
     */
    public function get($type = null)
    {
        global $wpdb;

        $select = new Select();
        $select->from(Queue::TABLE);

        if ($type) {
            $type = sanitize_text_field($type);
            $select->where("type = '$type'", $type);
        }

        $select->where("status = 'pending'");

        $select->limit(100);

        $results = [];
        foreach ($wpdb->get_results($select) as $result) {
            $class = $result->message_type;
            /** @var MessageAbstract $message */
            $message = new $class(unserialize($result->params));
            $message->setId($result->id);
            $message->setStatus('processing');

            $wpdb->update(
                $wpdb->prefix . Queue::TABLE,
                array(
                    'status' => $message->getStatus()
                ),
                array(
                    'id' => $message->getId()
                )
            );

            $results[] = $message;
        }
        return $results;
    }

    /**
     * @param int $id
     * @return MessageAbstract|mixed
     * @throws EmptyQueueException
     */
    public function getById($id)
    {
        global $wpdb;

        $select = new Select();
        $select->from(Queue::TABLE);
        $select->where("id = '$id'");

        $result = $wpdb->get_results($select);
        if (!$result) {
            return false;
        }
        $result = $result[0];
        $class = $result->message_type;

        if (!class_exists($class)) {
            return false;
        }

        /** @var MessageAbstract $message */
        $message = new $class(unserialize($result->params));
        $message->setId($result->id);
        return $message;
    }

    /**
     * @param MessageAbstract $message
     * @return $this|mixed
     */
    public function ack(MessageAbstract $message)
    {
        $this->delete($message);
        return $this;
    }

    /**
     * @param MessageAbstract $message
     * @return $this|mixed
     */
    public function error(MessageAbstract $message)
    {
        $this->delete($message);
        $message->setStatus('pending');
        $this->add($message);

        return $this;
    }

    /**
     * @param MessageAbstract $message
     * @return $this
     */
    public function delete(MessageAbstract $message)
    {
        global $wpdb;

        $wpdb->delete(
            $wpdb->prefix . Queue::TABLE,
            array(
                'id' => $message->getId()
            )
        );

        return $this;
    }
}
