<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Repository;

use B2W\SkyHub\Contract\Entity\ProductEntityInterface;
use B2W\SkyHub\Contract\Repository\ProductRepositoryInterface;
use B2W\SkyHub\Model\Entity\ProductEntity;
use B2W\SkyHub\Model\Resource\Collection;
use B2W\SkyHub\Model\Resource\Select;
use B2W\SkyHub\Model\Transformer\Product\DbToEntity;

class ProductDbRepository implements ProductRepositoryInterface
{

    protected function filter(Array $filter)
    {
        $defaultFilter = [
            'numberposts' => -1
        ];
        if (!isset($filter['post_status']) || !$filter['post_status']) {
            $defaultFilter['post_status'] = ['publish'];
        } else {
            $defaultFilter['post_status'] = $filter['post_status'];
        }

        if (!isset($filter['post_type']) || !$filter['post_type']) {
            $defaultFilter['post_type'] = ProductEntityInterface::POST_TYPE;
        } else {
            $defaultFilter['post_type'] = $filter['post_type'];
        }

        if (isset($filter['ID']) && $filter['ID']) {
            $defaultFilter['ID'] = $filter['ID'];
        }

        return $defaultFilter;
    }

    /**
     * @param array $filter
     * @return Collection|mixed
     * @throws \B2W\SkyHub\Exception\Data\TransformerNotFound
     */
    public function find(Array $filter = [])
    {
        $posts = get_posts($this->filter($filter));
        $collection = new Collection();
        foreach ($posts as $post) {
            $product = $this->one($post);
            $collection->addItem($product);
        }

        return $collection;
    }

    /**
     * @param int|\WP_Post $post
     * @return bool|mixed|null
     * @throws \B2W\SkyHub\Exception\Data\TransformerNotFound
     * @throws \Exception
     */
    public function one($post)
    {
        if (!$post instanceof \WP_Post) {
            $post = $this->get_post($post);
        }

        $product = new ProductEntity();

        if ($post->post_type != ProductEntityInterface::POST_TYPE) {
            return false;
        }

        /** @var \B2W\SkyHub\Model\Transformer\Product\DbToEntity $transformer */
        $transformer = new DbToEntity();
        $transformer->setPost($post);
        $transformer->setEntity($product);

        return $transformer->convert();
    }

    private function get_post($postId)
    {
        $post = get_post($postId);
        $attr = \App::repository(\App::REPOSITORY_PRODUCT_ATTRIBUTE)->getAttributeProduct($postId);
        if (!$attr) {
            return $post;
        }

        foreach ($attr as $value) {
            $code = $value->getCode();
            foreach ($value->getOptions() as $itens) {
                $options = $itens->getCode();
                break;
            }
            $post->$code = $options;
        }
        return $post;
    }

    /**
     * @param $sku
     * @return \B2W\SkyHub\Contract\Entity\ProductEntityInterface|bool|mixed|null
     * @throws \B2W\SkyHub\Exception\Data\TransformerNotFound
     */
    public function sku($sku)
    {
        global $wpdb;

        $sku = sanitize_text_field($sku);

        $select = new Select();
        $select->column('post_id');
        $select->from('postmeta');
        $select->where("meta_key = '_sku'");
        $select->where("meta_value= '$sku'");

        foreach ($wpdb->get_results($select) as $row) {
            return $this->one($row->post_id);
        }

        return false;
    }
}
