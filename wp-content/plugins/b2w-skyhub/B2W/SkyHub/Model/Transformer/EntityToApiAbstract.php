<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Transformer;

use B2W\SkyHub\Model\Map\MapAttribute;

/**
 * Class EntityToApiAbstract
 * @package B2W\SkyHub\Model\Transformer
 */
abstract class EntityToApiAbstract
{
    /**
     * @var null
     */
    protected $_entity    = null;
    /**
     * @var null
     */
    protected $_interface = null;
    /**
     * @var null
     */
    protected $_map = null;

    /**
     * @return mixed
     */
    abstract protected function _getAttributeMapInstance();

    /**
     * @return mixed
     */
    abstract protected function _getInterfaceInstance();

    /**
     * @return mixed|null
     */
    public function _getAttributeMap()
    {
        if (is_null($this->_map)) {
            $this->_map = $this->_getAttributeMapInstance();
        }

        return $this->_map;
    }

    /**
     * @return null
     */
    public function getEntity()
    {
        return $this->_entity;
    }

    /**
     *
     */
    public function getInterface()
    {
        if (is_null($this->_interface)) {
            $this->_interface = $this->_getInterfaceInstance();
        }

        return $this->_interface;
    }

    /**
     * @param $entity
     * @return null
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     * @throws \Exception
     */
    public function convert($entity)
    {
        $this->_entity      = $entity;

        $this->_validate();

        /** @var MapAttribute $attribute */
        foreach ($this->_getAttributeMap()->map() as $attribute) {

            $value = $attribute->getMapper('entity_to_api')
                ? $this->_fromMapper($attribute)
                : $this->_getValue($attribute);

            if ($value) {
                $this->getInterface()->setData($attribute->getSkyhub(), $value);
            }
        }

        return $this->getInterface();
    }

    /**
     * @return $this
     * @throws \Exception
     */
    protected function _validate()
    {
        if (!$this->getEntity()) {
            throw new \B2W\SkyHub\Exception\Exception(get_class($this) . ': Entity cant be empty');
        }

        if (!$this->getInterface()) {
            throw new \B2W\SkyHub\Exception\Exception(get_class($this) . ': Interface cant be empty');
        }

        return $this;
    }

    /**
     * @param MapAttribute $attribute
     * @return string
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     */
    protected function _fromMapper(MapAttribute $attribute)
    {
        if (!class_exists($attribute->getMapper('entity_to_api'))) {
            return '';
        }

        $value = $this->_getValue($attribute);
        $name = $attribute->getMapper('entity_to_api');
        $mapper = new $name();
        return $mapper->convert($value, $this);
    }

    /**
     * @param MapAttribute $attribute
     * @return string
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     */
    protected function _getValue(MapAttribute $attribute)
    {
        $entity = $this->getEntity();
        $method = \App::helper('app')->getGetterMethodName($entity, $attribute->getSkyhub());

        if (!$method) {
            return '';
        }

        return $entity->$method();
    }
}
