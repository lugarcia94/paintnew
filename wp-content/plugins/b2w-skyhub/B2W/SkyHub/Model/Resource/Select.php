<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Resource;

/**
 * Class Select
 * @package B2W\SkyHub\Model\Resource
 */
class Select
{
    /**
     * @var array
     */
    protected $_columns  = array();
    /**
     * @var array
     */
    protected $_from    = array();
    /**
     * @var array
     */
    protected $_join    = array();
    /**
     * @var array
     */
    protected $_where   = array();
    protected $_group   = array();
    protected $_limit   = array();

    /**
     * @param $table
     * @param null $alias
     * @return $this
     */
    public function column($column, $alias = null)
    {
        if (is_array($column)) {
            foreach ($column as $cl) {
                $this->column($cl);
            }

            return $this;
        }

        $this->_columns[] = array(
            'table' => $column,
            'alias' => $alias
        );

        return $this;
    }

    /**
     * @param $table
     * @param $alias
     * @return $this
     */
    public function from($table, $alias = null)
    {
        global $wpdb;

        $this->_from = array(
            'table' => $wpdb->prefix . $table,
            'alias' => $alias ?: $wpdb->prefix . $table
        );

        return $this;
    }

    /**
     * @param $table
     * @param $on
     * @param null $alias
     * @param null $type
     * @return $this
     */
    public function join($table, $on, $alias = null, $type = null)
    {
        global $wpdb;

        $this->_join[] = array(
            'table' => $wpdb->prefix . $table,
            'on'    => $on,
            'alias' => $alias,
            'type'  => $type
        );

        return $this;
    }

    /**
     * @param $where
     * @return $this
     */
    public function where($where)
    {
        $this->_where[] = $where;
        return $this;
    }

    public function group($group)
    {
        $this->_group[] = $group;
        return $this;
    }

    public function limit($count, $offset = 0)
    {
        $this->_limit = array(
            'count'  => $count,
            'offset' => $offset
        );

        return $this;
    }

    /**
     * @return string
     */
    public function prepare()
    {
        $query = "SELECT ";

        $columns = array();
        foreach ($this->_columns as $column) {
            $c = $column['table'];
            if (isset($column['alias']) && !empty($column['alias'])) {
                $c .= " AS " . $column['alias'];
            }
            $columns[] = $c;
        }

        if (empty($columns)) {
            $columns[] = '*';
        }

        $query .= implode(', ', $columns);
        $query .= "\n";

        $query .= "FROM " . $this->_from['table'];
        if (isset($this->_from['alias']) && !empty($this->_from['alias'])) {
            $query .= " AS " . $this->_from['alias'];
        }

        foreach ($this->_join as $join) {
            $query .= "\n";
            if (isset($join['type']) & !empty($join['type'])) {
                $query .= strtoupper($join['type']);
            }
            $query .= " JOIN " . $join['table'];
            if (isset($join['alias']) && !empty($join['alias'])) {
                $query .= " AS " . $join['alias'];
            }
            $query .= " ON " . $join['on'];
        }

        if (!empty($this->_where)) {
            $query .= "\n";
            $query .= " WHERE ";
            $query .= implode(' AND ', $this->_where);
        }

        if (!empty($this->_group)) {
            $query .= "\n";
            $query .= "GROUP BY " . implode(',', $this->_group);
        }

        if (!empty($this->_limit)) {
            $query .= "\n";
            $query .= "LIMIT " . $this->_limit['offset'] . ', ' . $this->_limit['count'];
        }

        return $query;
    }

    /**
     * @return string
     */
    public function __toString()
    {
        return $this->prepare();
    }
}
