<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Controller;

use B2W\SkyHub\Contract\Entity\OrderEntityInterface;
use B2W\SkyHub\Model\Map\Order\StatusMap;
use B2W\SkyHub\Model\Queue\Message\OrderShippMessage;
use B2W\SkyHub\Model\Queue\Message\OrderInvoiceMessage;
use B2W\SkyHub\Model\Map\Order\InvoiceMap;
use B2W\SkyHub\Model\Queue\Message\OrderDeliveryMessage;
use B2W\SkyHub\Model\Queue\Message\OrderCanceledMessage;

/**
 * Class Order
 * @package B2W\SkyHub\Controller
 */
class Order
{
    /**
     * @param $orderId
     * @param $statusFrom
     * @param $statusTo
     * @param $wcOrder
     * @return $this
     * @throws \B2W\SkyHub\Exception\Data\RepositoryNotFound
     * @throws \B2W\SkyHub\Exception\Exception
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     */
    public function update($orderId, $statusFrom, $statusTo, $wcOrder)
    {
        $skyhubAction = null;

        $map = new StatusMap();

        /** @var OrderEntityInterface $order */
        $order = \App::repository(\App::REPOSITORY_ORDER)->one($orderId);

        if (!$order->getChannel()) {
            return $this;
        }

        foreach ($map->map() as $attribute) {
            if ($attribute->getWordpress() == 'wc-' . $statusTo) {
                $skyhubAction = $attribute->getSkyhub();
                $methodName = '_' . $skyhubAction;
                if (method_exists($this, $methodName)) {
                    $this->$methodName($order);
                }
            }
        }

        return $this;
    }

    /**
     * @param OrderEntityInterface $order
     * @return $this
     * @throws \B2W\SkyHub\Exception\Data\RepositoryNotFound
     * @throws \B2W\SkyHub\Exception\Exception
     */
    protected function _shipped(OrderEntityInterface $order)
    {
        if (!$order->getChannel()) {
            return $this;
        }

        if ($order->isB2WEntregas()) {
            return $this;
        }

        if ($order->getStatus()->getCode() == 'wc-cancelled') {
            return $this;
        }
        $message = new OrderShippMessage($order->getId());
        \App::repository(\App::REPOSITORY_QUEUE)->add($message);
        return $this;
    }

    /**
     * @param OrderEntityInterface $order
     * @return $this
     * @throws \B2W\SkyHub\Exception\Data\RepositoryNotFound
     * @throws \B2W\SkyHub\Exception\Exception
     */
    protected function _delivered(OrderEntityInterface $order)
    {
        if (!$order->getChannel()) {
            return $this;
        }

        if ($order->isB2WEntregas()) {
            return $this;
        }
        
        if ($order->getStatus()->getCode() == 'wc-cancelled') {
            return $this;
        }
        $message = new OrderDeliveryMessage($order->getId());
        \App::repository(\App::REPOSITORY_QUEUE)->add($message);
        return $this;
    }

    protected function _canceled(OrderEntityInterface $order)
    {
        if (!$order->getChannel()) {
            return $this;
        }

        $message = new OrderCanceledMessage($order->getId());
        \App::repository(\App::REPOSITORY_QUEUE)->add($message);
        return $this;
    }

    //order_invoiced
    public function updateInvoice($orderId)
    {
        /** @var OrderEntityInterface $order */
        $order = \App::repository(\App::REPOSITORY_ORDER)->one($orderId);
        
        if (!$order->getChannel()) {
            return $this;
        }

        if ($order->getStatus()->getCode() == 'wc-cancelled') {
            return $this;
        }

        if (empty( $_POST['key'] )) {
            return $this;
        }

        $skyhubAction = null;
        $map = new InvoiceMap();
        foreach ($map->map() as $attribute) {
            if ($attribute->getSkyhub() == 'key') {
                $skyhubAction = $attribute->getWordpress();
                break;
            }
        }

        $oldInvoiceKey = get_post_meta($orderId, $skyhubAction);
        if ($oldInvoiceKey[0] == $_POST['key']) {
            return $this;
        }
        
        update_post_meta( $orderId, $skyhubAction, $_POST['key'] );
        $message = new OrderInvoiceMessage($order->getId());
        \App::repository(\App::REPOSITORY_QUEUE)->add($message);
        return $this;
    }

    public function saveTrack($orderId)
    {
        if (!isset($_POST['_skyhub_order_shipping_url']) && !isset($_POST['_skyhub_order_shipping_code'])) {
            return;
        }

        /** @var OrderEntityInterface $order */
        $order = \App::repository(\App::REPOSITORY_ORDER)->one($orderId);
        if (!$order->getChannel()) {
            return $this;
        }

        if ($order->isB2WEntregas()) {
            return $this;
        }

        $sendQueue = false;
        $skyhubURL = get_post_meta($orderId, '_skyhub_order_shipping_code');
        if ($skyhubURL[0] != $_POST['_skyhub_order_shipping_url']) {
            $sendQueue = true;
            update_post_meta($orderId, '_skyhub_order_shipping_url', $_POST['_skyhub_order_shipping_url']);
        }
        
        $skyhubCode = get_post_meta($orderId, '_skyhub_order_shipping_code');
        if ($skyhubCode[0] != $_POST['_skyhub_order_shipping_code']) {
            $sendQueue = true;
            update_post_meta($orderId, '_skyhub_order_shipping_code', $_POST['_skyhub_order_shipping_code']);
        }

        if ($sendQueue) {
            if (!$order->getChannel()) {
                return $this;
            }

            $this->_shipped($order);
        }
    }
}
